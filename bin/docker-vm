#!/bin/sh
set -ue

# Assumption: VirtualBox as a VM engine

APP_HOME="$HOME/.docker-vm"

DOCKER_USER="root"
DOCKER_ROOT="/dockerhome"
DOCKER_SHARE_NAME=$(echo $DOCKER_ROOT | tr -d '/')

DOCKER_VM_NAME=${DOCKER_VM_NAME:-"docker"}
DOCKER_VM_HOME="$APP_HOME/$DOCKER_VM_NAME"
DOCKER_VM_SSH_PRIVATE_KEY="$DOCKER_VM_HOME/id_rsa"
DOCKER_VM_SSH_PUBLIC_KEY="${DOCKER_VM_SSH_PRIVATE_KEY}.pub"

SSH_OPTS=${SSH_OPTS:-""}

alias is_vm_running='VBoxManage showvminfo $DOCKER_VM_NAME | grep -E -q running'

vm_ssh() {
    IP="${DOCKER_IP:-$(vm_get_ip)}"
    [ -z "$IP" ] && die "$DOCKER_VM_NAME ip not found"
    if [ -f "$DOCKER_VM_SSH_PRIVATE_KEY" ]; then
        SSH_OPTS="$SSH_OPTS -i $DOCKER_VM_SSH_PRIVATE_KEY"
    fi
    # We _want_ SSH_OPTS to be globbed and split into multiple options
    # shellcheck disable=SC2086
    ssh -o ConnectTimeout=3 -o StrictHostKeyChecking=no $SSH_OPTS "$DOCKER_USER@$IP" "$@"
}

vm_get_ip() {
    # HACK: relies on the interface order:
    # - assumes that the 1st interface is the shared interface between host and docker guest
    # TODO: Need to find a way to make it independent of guest interfaces order
    VBoxManage guestproperty enumerate "$DOCKER_VM_NAME" |
        grep 'Net/0/V4/IP' |
        grep -E -o 'value: .*?,' |
        tr -d ':, [:alpha:]'
}

vm_create() {
    # TODO: add machine creation
    # VM must be turned off
    is_vm_running && die "$DOCKER_VM_NAME must be turned off to enable sharing"
    VBoxManage sharedfolder add "$DOCKER_VM_NAME" --name "$DOCKER_SHARE_NAME" -hostpath / || true
}

vm_init() {
    DOCKER_IP="$1"  # IP must be provided externally before guests additions installed
    [ ! -f "$DOCKER_VM_SSH_PRIVATE_KEY" ] &&
        echo | ssh-keygen -f "$DOCKER_VM_SSH_PRIVATE_KEY" &&

    # ensure SSH keys are secured so ssh client is happy
    chmod 600 $DOCKER_VM_SSH_PRIVATE_KEY*

    INIT_CMD="mkdir -p $DOCKER_ROOT"
    INIT_CMD="$INIT_CMD && mkdir -p /root/.ssh/"
    INIT_CMD="$INIT_CMD && echo 'Welcome to the Docker host' > /etc/motd"
    # setup fstab to automaunt host shared folder
    INIT_CMD="$INIT_CMD && cp /etc/fstab ./fstab.orig"
    INIT_CMD="$INIT_CMD && echo '$DOCKER_SHARE_NAME $DOCKER_ROOT vboxsf defaults 0 0' >> /etc/fstab"
    # do not wait before booting OS
    INIT_CMD="$INIT_CMD && echo TIMEOUT 30 | sed -i.orig 's/TIMEOUT [0-9]\+/TIMEOUT 1/g' /boot/extlinux.conf"
    # remount all fstab after adding DOCKER_ROOT mount
    INIT_CMD="$INIT_CMD && mount -a"
    vm_ssh "$INIT_CMD"

    # make root accessible via ssh
    vm_ssh "sh -c 'cat > /root/.ssh/authorized_keys' && chmod -R 600 /root/.ssh" < "$DOCKER_VM_SSH_PUBLIC_KEY"

    # install required packages
    vm_ssh sh < "$(dirname "$0")/../alpine-install-pkg.sh"
}

vm_start() {
    if is_vm_running ; then
        echo "$DOCKER_VM_NAME is already running"
        exit 0
    fi

    exec VBoxManage startvm "$DOCKER_VM_NAME" --type headless
}

vm_stop() {
    exec VBoxManage controlvm "$DOCKER_VM_NAME" acpipowerbutton
}

vm_status() {
    exec VBoxManage showvminfo "$DOCKER_VM_NAME" | grep -F State:
}

vm_poweroff() {
    exec VBoxManage controlvm "$DOCKER_VM_NAME" poweroff
}

die() {
    msg="$1"
    code="${2-1}"  # default exit status 1
    echo "fatal: $msg" && exit "$code"
}

autocomplete() {
    grep -E '# subcommand$' "$0" | sed -E s'/\).*$//g' | tr -d " " | sort
}

help() {
    cmd=$(basename "$0")
    echo "$cmd: controls docker virtual machine. Part of Docker for MacOS."
    echo ""
    echo "Usage:"
    echo "  $cmd [command]"
    echo ""
    echo "Available commands:"
    autocomplete | xargs -n1 echo "    "
}

CMD=${1:-""}
shift   # the rest of the args can be used further

mkdir -p "$DOCKER_VM_HOME"

case "$CMD" in
    autocomplete    ) autocomplete ;;               # subcommand
    create          ) vm_create ;;                  # subcommand
    init            ) vm_init "$1" ;;               # subcommand
    ip              ) vm_get_ip ;;                  # subcommand
    poweroff        ) vm_poweroff ;;                # subcommand
    start           ) vm_start ;;                   # subcommand
    status          ) vm_status ;;                  # subcommand
    stop            ) vm_stop ;;                    # subcommand
    ssh             ) vm_ssh "$@" ;;                # subcommand
    help|-h|--help  ) help "$@" ;; 
    *               ) die "Unknown commad: $CMD" ;;
esac
